plugins {
	id 'org.springframework.boot' version '2.2.0.BUILD-SNAPSHOT'
	id 'java'

}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'antlr'
apply plugin: 'maven-publish'

repositories {
	mavenLocal()
	mavenCentral()
}

group = 'com.accelaero.aeroconnect'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/snapshot' }
	maven { url 'https://repo.spring.io/milestone' }
}

project.ext {

	aeroconnect_couchbase_server = System.getenv()['aeroconnect_couchbase_server']
	aeroconnect_couchbase_server_port = System.getenv()['aeroconnect_couchbase_server_port']
	aeroconnect_couchbase_server_view_port = System.getenv()['aeroconnect_couchbase_server_view_port']
	aeroconnect_couchbase_server_index_port = System.getenv()['aeroconnect_couchbase_server_index_port']
	aeroconnect_couchbase_server_fts_port = System.getenv()['aeroconnect_couchbase_server_fts_port']

	aeroconnect_couchbase_configuration_bucketName = 'employee'
	aeroconnect_couchbase_configuration_bucketPass = System.getenv()['aeroconnect_couchbase_configuration_bucketPass']
	aeroconnect_couchbase_configuration_bucketSizeMb = System.getenv()['aeroconnect_couchbase_configuration_bucketSizeMb']

	aeroconnect_couchbase_encryption_enable = System.getenv()['aeroconnect_couchbase_encryption_enable']

	couchbaseRootUser = System.getenv()['aeroconnect_couchbase_rootUser']
	couchbaseRootPass = System.getenv()['aeroconnect_couchbase_rootPass']
	cluster_ram_quota = System.getenv()['aeroconnect_couchbase_cluster_ram_quota']
	ramQuotaTest = System.getenv()['aeroconnect_couchbase_ramQuotaTest']
	ftsMemoryQuota = System.getenv()['aeroconnect_couchbase_ftsMemoryQuota']
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	antlr "org.antlr:antlr4:4.7.1"
	compile "org.antlr:antlr4-runtime:4.7.1"
    compile 'junit:junit:4.12'

	compile group: 'io.grpc', name: 'grpc-netty-shaded', version: '1.27.1'
	compile group: 'io.grpc', name: 'grpc-protobuf', version: '1.27.1'
	compile group: 'io.grpc', name: 'grpc-stub', version: '1.27.1'
	compile group: 'io.grpc', name: 'grpc-services', version: '1.27.1'
	compile group: 'net.devh', name: 'grpc-server-spring-boot-starter', version: '2.6.2.RELEASE'
	testCompile group: 'io.grpc', name: 'grpc-testing', version: '1.27.1'
	implementation "org.springframework.boot:spring-boot-starter-data-couchbase"
	implementation "com.couchbase.client:couchbase-spring-cache"
	implementation "io.grpc:grpc-netty-shaded"
	implementation "io.grpc:grpc-protobuf"
	implementation "io.grpc:grpc-stub"
	implementation "io.grpc:grpc-services"
	implementation "com.google.protobuf:protobuf-java-util"
	implementation "net.devh:grpc-server-spring-boot-starter"
	testImplementation "io.grpc:grpc-testing"



}


generateGrammarSource {
	maxHeapSize = "64m"
	arguments += ['-visitor' ,'-package','com.accelaero.aeroconnect.textprocessor.parser','-lib', 'src/main/antlr/ssm']

	// Keep a copy of generated sources
	doLast {
		println "Copying generated grammar lexer/example files to main directory."
		copy {
			from "${buildDir}/generated-src/antlr/main"
			into "generated-src/main/java"
		}
	}
}